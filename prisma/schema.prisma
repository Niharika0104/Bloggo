datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  password   String
  phonenumber String?
  posts      Post[]
  likes      Like[]
  commentLikes CommentLike[]
  comments   Comment[]
  following  Follow[]    @relation("following")
  followers  Follow[]    @relation("followers")
  savedPosts SavedPost[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Post {
  id         String      @id @default(uuid())
  title      String
  content    String
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String
  category   Category?    @relation(fields: [categoryId], references: [id])
  categoryId String?
  likes      Like[]
  comments   Comment[]
  savedBy    SavedPost[]
  isDeleted  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Like {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  post      Post        @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime    @default(now())
}

model Follow {
  id         String      @id @default(uuid())
  follower   User        @relation("following", fields: [followerId], references: [id])
  followerId String
  following  User        @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt  DateTime    @default(now())
}

model SavedPost {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  post      Post        @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime    @default(now())
}

model Category {
  id        String      @id @default(uuid())
  name      String      @unique
  posts     Post[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Comment {
  id          String         @id @default(uuid())
  content     String
  author      User           @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post           @relation(fields: [postId], references: [id])
  postId      String
  parent      Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[]      @relation("CommentReplies")
  likes       CommentLike[]
  isDeleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
model CommentLike {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  comment     Comment        @relation(fields: [commentId], references: [id])
  commentId   String
  createdAt   DateTime       @default(now())
}